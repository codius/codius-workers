---
import { Badge } from "@/components/ui/badge"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FiDollarSign, FiGithub, FiTrash2 } from "react-icons/fi"
import AppBilling from "@/components/AppBilling.astro"
import CardField from "@/components/CardField.astro"
import Layout from "@/layouts/Layout.astro"

if (!Astro.params.id) {
  return Astro.redirect("/apps")
}

const app = await Astro.locals.db.apps.getById(Astro.params.id)

if (!app) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  })
}

const userIsDeployer = Astro.locals.user?.id === app.deployer.id

if (app.status !== "deployed" && !userIsDeployer) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  })
}
---

<Layout>
  <main>
    <Card>
      <CardHeader>
        <CardTitle>
          <a
            href={`https://${app.id}.${Astro.locals.runtime.env.DISPATHER_HOSTNAME}`}
            target="_blank"
            rel="noopener noreferrer"
            >{`${app.id}.${Astro.locals.runtime.env.DISPATHER_HOSTNAME}`}</a
          >
        </CardTitle>
        <CardDescription
          >Deployed by <a
            href={`https://github.com/${app.deployer.username}`}
            target="_blank"
            rel="noopener noreferrer">{app.deployer.username}</a
          >
        </CardDescription>
        <CardContent>
          {
            userIsDeployer && (
              <div class="flex flex-col items-start mb-4 gap-4">
                <CardField label="Status">
                  <Badge
                    className="inline-flex"
                    variant={
                      app.deletedAt
                        ? "outline"
                        : app.status === "deployed"
                          ? "default"
                          : app.status === "failed"
                            ? "destructive"
                            : "secondary"
                    }
                    slot="content"
                  >
                    {app.deletedAt ? "deleted" : app.status}
                  </Badge>
                </CardField>
                {app.githubWorkflowRunId && app.githubWorkflowJobId && (
                  <Button
                    className="view-workflow"
                    data-workflow-run-id={app.githubWorkflowRunId}
                    data-workflow-job-id={app.githubWorkflowJobId}
                  >
                    <FiGithub className="mr-2" />
                    View Workflow
                  </Button>
                )}
              </div>
            )
          }
          <div class="grid grid-cols-2 gap-4">
            <div class="col-span-1 grid gap-4">
              <CardField label="Repo">
                <a
                  href={`https://github.com/${app.githubOwner}/${app.repo}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center"
                  style="align-items: baseline;"
                  slot="content"
                >
                  <FiGithub className="mr-2" />{app.githubOwner}/{app.repo}
                </a>
              </CardField>
              <CardField
                label="Branch (at time of deploy)"
                content={app.branch}
                link={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.branch}`}
              />
              <CardField
                label="Commit"
                content={app.commitHash}
                link={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.commitHash}`}
              />
              <CardField
                label="Directory"
                content={app.directory || "/"}
                link={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.commitHash}/${app.directory}`}
              />
              <CardField
                label="Created At"
                content={new Date(app.createdAt + "Z").toUTCString()}
              />
              {
                app.deletedAt === null && userIsDeployer && (
                  <div>
                    <Button
                      variant="destructive"
                      className="delete-app"
                      data-app-id={app.id}
                    >
                      <FiTrash2 className="icon mr-2" />
                      Delete App
                    </Button>
                  </div>
                )
              }
            </div>
            <div class="col-span-1 grid gap-4">
              <AppBilling appId={app.id} />
              <div>
                <Button
                  className="top-up-balance"
                  data-app-id={app.id}
                  disabled={app.deletedAt !== null}
                >
                  <FiDollarSign className="icon mr-2" />
                  Top Up Balance
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </CardHeader>
    </Card>
  </main>
</Layout>

<script>
  import { actions } from "astro:actions"

  const topUpBalanceButton = document.querySelector<HTMLButtonElement>(
    "button.top-up-balance",
  )
  if (topUpBalanceButton) {
    topUpBalanceButton.addEventListener("click", async () => {
      if (!topUpBalanceButton.dataset.appId) {
        console.error("Missing appId")
        return
      }
      topUpBalanceButton.disabled = true
      try {
        const sessionUrl = await actions.createCheckoutSession({
          appId: topUpBalanceButton.dataset.appId,
        })
        window.location.href = sessionUrl
      } catch (error) {
        console.error("Failed to create checkout session:", error)
        topUpBalanceButton.disabled = false
      }
    })
  }

  const viewWorkflowButton = document.querySelector<HTMLButtonElement>(
    "button.view-workflow",
  )
  if (viewWorkflowButton) {
    viewWorkflowButton.addEventListener("click", () => {
      window.open(
        `https://github.com/codius/codius-astro/actions/runs/${viewWorkflowButton.dataset.workflowRunId}/job/${viewWorkflowButton.dataset.workflowJobId}`,
        "_blank",
        "noopener,noreferrer",
      )
    })
  }

  const deleteAppButton =
    document.querySelector<HTMLButtonElement>("button.delete-app")
  if (deleteAppButton) {
    deleteAppButton.addEventListener("click", async () => {
      if (!deleteAppButton.dataset.appId) {
        console.error("Missing appId")
        return
      }
      deleteAppButton.disabled = true
      const icon = deleteAppButton.querySelector(".icon")
      icon?.classList.add("animate-spin")
      try {
        await actions.deleteApp({ id: deleteAppButton.dataset.appId })
        window.location.href = "/apps"
      } catch (error) {
        console.error("Failed to delete app:", error)
        icon?.classList.remove("animate-spin")
        deleteAppButton.disabled = false
      }
    })
  }
</script>
