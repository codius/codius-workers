---
import { Badge } from "@/components/ui/badge"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FiDollarSign, FiGithub, FiTrash2 } from "react-icons/fi"
import { Label } from "@/components/ui/label"
import { CostTooltip } from "@/components/CostTooltip"
import Layout from "@/layouts/Layout.astro"
import { centsToNanocents, centsToString, nanocentsToString } from "@/lib/utils"

if (!Astro.locals.user) {
  return Astro.redirect("/")
}

if (!Astro.params.id) {
  return Astro.redirect("/apps")
}

const app = await Astro.locals.db.apps.getWithTotalFunding({
  id: Astro.params.id,
  userId: Astro.locals.user.id,
})

if (!app) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  })
}

// TODO: use GraphQL typegen
interface WorkerUsageResponse {
  data: {
    viewer: {
      accounts: Array<{
        workersInvocationsAdaptive: Array<{
          sum: {
            requests: number
            cpuTimeUs: number
          }
        }>
      }>
    }
  }
}

// TODO: cache
// https://developers.cloudflare.com/analytics/graphql-api/limits/#user-limits
const getWorkerUsage = async () => {
  const query = `
  query GetWorkerInvocationSums($accountTag: String, $datetimeStart: String, $datetimeEnd: String, $scriptName: String) {
    viewer {
      accounts(filter: {accountTag: $accountTag}) {
        workersInvocationsAdaptive(limit: 1000, filter: {
          scriptName: $scriptName,
          datetime_geq: $datetimeStart,
          datetime_leq: $datetimeEnd
        }) {
          sum {
            requests
            cpuTimeUs
          }
        }
      }
    }
  }
  `

  const variables = {
    accountTag: Astro.locals.runtime.env.CLOUDFLARE_ACCOUNT_ID,
    scriptName: app.id,
    datetimeStart: app.createdAt.toISOString(),
    datetimeEnd: new Date().toISOString(),
  }

  try {
    const response = await fetch(
      "https://api.cloudflare.com/client/v4/graphql/",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${Astro.locals.runtime.env.CF_ANALYTICS_API_TOKEN}`,
        },
        body: JSON.stringify({ query, variables }),
      },
    )
    const { data } = (await response.json()) as WorkerUsageResponse

    return data.viewer.accounts[0].workersInvocationsAdaptive.length
      ? data.viewer.accounts[0].workersInvocationsAdaptive[0].sum
      : {
          requests: 0,
          cpuTimeUs: 0,
        }
  } catch (error) {
    console.error("Failed to fetch worker usage data:", error)
    return null
  }
}

const workerData = await getWorkerUsage()

const getTotalMonths = (createdAt: Date): number => {
  const now = new Date()
  const years = now.getFullYear() - createdAt.getFullYear()
  const months = now.getMonth() - createdAt.getMonth()
  const dayDifference = now.getDate() - createdAt.getDate()

  // Calculate initial months based on year and month differences
  let totalMonths = years * 12 + months

  // Check if the day has been reached or passed in the current month
  if (dayDifference >= 0) {
    // Increment month count since it's inclusive and starts at 1
    totalMonths += 1
  } else {
    // If the exact anniversary day hasn't been reached yet this month, start counting from 1
    totalMonths = Math.max(1, totalMonths)
  }

  return totalMonths
}

// TODO: configure via environment variables
// 1 USD = 10^11 Nano-cents
const NANO_CENT_PER_REQUEST = 30_000n
const NANO_CENT_PER_CPU_US = 2n
const NANO_CENT_PER_MONTH = 2_000_000_000n

// $0.02 / script / month
// $0.30 / million requests
// $0.02 / million CPU seconds
const calculateWorkerCostInNanoCents = (
  months: number,
  requests: bigint,
  cpuTimeUs: bigint,
): bigint => {
  // Calculate total costs
  const monthlyCost = BigInt(months) * NANO_CENT_PER_MONTH
  const requestCost = requests * NANO_CENT_PER_REQUEST
  const cpuCost = cpuTimeUs * NANO_CENT_PER_CPU_US

  // Total cost in nano-cents
  return monthlyCost + requestCost + cpuCost
}

const totalCost =
  workerData &&
  calculateWorkerCostInNanoCents(
    getTotalMonths(new Date(app.createdAt + "Z")),
    BigInt(workerData.requests),
    BigInt(workerData.cpuTimeUs),
  )
---

<Layout>
  <main>
    <Card>
      <CardHeader>
        <CardTitle>{app.id}</CardTitle>
        <CardDescription
          >Deployed by <a
            href={`https://github.com/${Astro.locals.user.username}`}
            target="_blank"
            rel="noopener noreferrer">{Astro.locals.user.username}</a
          >
        </CardDescription>
        <CardContent>
          <div class="grid w-full items-center gap-4">
            <div class="flex flex-col space-y-1.5">
              <Label>URL</Label>
              <div class="rounded-md border p-3">
                <a
                  href={`https://${app.id}.brandon-4fb.workers.dev`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {`https://${app.id}.brandon-4fb.workers.dev`}
                </a>
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Repo</Label>
              <div class="rounded-md border p-3">
                <a
                  href={`https://github.com/${app.githubOwner}/${app.repo}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center"
                  style="align-items: baseline;"
                >
                  <FiGithub className="mr-2" />{app.githubOwner}/{app.repo}
                </a>
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Branch (at time of deploy)</Label>
              <div class="rounded-md border p-3">
                <a
                  href={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.branch}`}
                  target="_blank"
                  rel="noopener noreferrer">{app.branch}</a
                >
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Commit</Label>
              <div class="rounded-md border p-3">
                <a
                  href={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.commitHash}`}
                  target="_blank"
                  rel="noopener noreferrer">{app.commitHash}</a
                >
              </div>
            </div>
            {
              app.directory && (
                <div class="flex flex-col space-y-1.5">
                  <Label>Directory</Label>
                  <div class="rounded-md border p-3">
                    <a
                      href={`https://github.com/${app.githubOwner}/${app.repo}/tree/${app.commitHash}/${app.directory}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {app.directory}
                    </a>
                  </div>
                </div>
              )
            }
            <div class="flex flex-col space-y-1.5">
              <Label>Status</Label>
              <div class="rounded-md border p-3">
                <Badge
                  className="inline-flex"
                  variant={app.deletedAt
                    ? "outline"
                    : app.status === "deployed"
                      ? "default"
                      : app.status === "failed"
                        ? "destructive"
                        : "secondary"}
                >
                  {app.deletedAt ? "deleted" : app.status}
                </Badge>
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Created At</Label>
              <div class="rounded-md border p-3">
                {new Date(app.createdAt + "Z").toUTCString()}
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Requests</Label>
              <div class="rounded-md border p-3">
                {workerData !== null ? workerData.requests : "N/A"}
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Total CPU Time</Label>
              <div class="rounded-md border p-3">
                {
                  workerData !== null
                    ? workerData.cpuTimeUs
                      ? workerData.cpuTimeUs / 1000
                      : 0
                    : "N/A"
                }
                ms
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <div class="flex items-center space-x-2">
                <Label>Total Cost</Label>
                <div class="ml-4">
                  <CostTooltip client:only="react" />
                </div>
              </div>
              <div class="rounded-md border p-3">
                {totalCost !== null ? nanocentsToString(totalCost) : "N/A"}
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Total Funding</Label>
              <div class="rounded-md border p-3">
                {centsToString(app.totalFunding)}
              </div>
            </div>
            <div class="flex flex-col space-y-1.5">
              <Label>Balance</Label>
              <div class="rounded-md border p-3">
                {
                  totalCost !== null
                    ? nanocentsToString(
                        centsToNanocents(app.totalFunding) - totalCost,
                      )
                    : "N/A"
                }
              </div>
            </div>
          </div>
        </CardContent>

        <div class="mb-4">
          <Button
            className="top-up-balance"
            data-app-id={app.id}
            disabled={app.deletedAt !== null}
          >
            <FiDollarSign className="icon mr-2" />
            Top Up Balance
          </Button>
        </div>
        {
          app.githubWorkflowRunId && app.githubWorkflowJobId && (
            <div class="mb-4">
              <Button
                className="view-workflow"
                data-workflow-run-id={app.githubWorkflowRunId}
                data-workflow-job-id={app.githubWorkflowJobId}
              >
                <FiGithub className="mr-2" />
                View Workflow
              </Button>
            </div>
          )
        }
        {
          app.deletedAt === null && (
            <div>
              <Button
                variant="destructive"
                className="delete-app"
                data-app-id={app.id}
              >
                <FiTrash2 className="icon mr-2" />
                Delete App
              </Button>
            </div>
          )
        }
      </CardHeader>
    </Card>
  </main>
</Layout>

<script>
  import { actions } from "astro:actions"

  const topUpBalanceButton = document.querySelector<HTMLButtonElement>(
    "button.top-up-balance",
  )
  if (topUpBalanceButton) {
    topUpBalanceButton.addEventListener("click", async () => {
      if (!topUpBalanceButton.dataset.appId) {
        console.error("Missing appId")
        return
      }
      topUpBalanceButton.disabled = true
      try {
        const sessionUrl = await actions.createCheckoutSession({
          appId: topUpBalanceButton.dataset.appId,
        })
        window.location.href = sessionUrl
      } catch (error) {
        console.error("Failed to create checkout session:", error)
        topUpBalanceButton.disabled = false
      }
    })
  }

  const viewWorkflowButton = document.querySelector<HTMLButtonElement>(
    "button.view-workflow",
  )
  if (viewWorkflowButton) {
    viewWorkflowButton.addEventListener("click", () => {
      window.open(
        `https://github.com/codius/codius-astro/actions/runs/${viewWorkflowButton.dataset.workflowRunId}/job/${viewWorkflowButton.dataset.workflowJobId}`,
        "_blank",
        "noopener,noreferrer",
      )
    })
  }

  const deleteAppButton =
    document.querySelector<HTMLButtonElement>("button.delete-app")
  if (deleteAppButton) {
    deleteAppButton.addEventListener("click", async () => {
      if (!deleteAppButton.dataset.appId) {
        console.error("Missing appId")
        return
      }
      deleteAppButton.disabled = true
      const icon = deleteAppButton.querySelector(".icon")
      icon?.classList.add("animate-spin")
      try {
        await actions.deleteApp({ id: deleteAppButton.dataset.appId })
        window.location.href = "/apps"
      } catch (error) {
        console.error("Failed to delete app:", error)
        icon?.classList.remove("animate-spin")
        deleteAppButton.disabled = false
      }
    })
  }
</script>
