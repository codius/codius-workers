---
import { Badge } from "@/components/ui/badge"
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import AppRepoLink from "./AppRepoLink.astro"
import type { User } from "lucia"

interface Props {
  user: User
  dispatcherHostname: string
}

const { dispatcherHostname, user } = Astro.props
const apps = await Astro.locals.db.apps.getByUserId(user.id)
---

<Table>
  <TableCaption>Your Apps</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead>URL</TableHead>
      <TableHead>GitHub Repo</TableHead>
      <TableHead>Git Ref</TableHead>
      <TableHead>Directory</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Created At</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {
      apps.length === 0 && (
        <TableRow>
          <TableCell className="text-center">No apps found</TableCell>
        </TableRow>
      )
    }
    {
      apps.map((app) => (
        <TableRow key={app.id} data-app-id={app.id} clickable>
          <TableCell>
            <a
              href={`https://${app.id}.${dispatcherHostname}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              {`https://${app.id}.${dispatcherHostname}`}
            </a>
          </TableCell>

          <TableCell>
            <AppRepoLink app={app} content={`${app.githubOwner}/${app.repo}`} />
          </TableCell>
          <TableCell>
            <AppRepoLink app={app} content={app.gitRef} />
          </TableCell>
          <TableCell>
            <AppRepoLink app={app} content={app.directory} />
          </TableCell>

          <TableCell>
            <Badge
              variant={
                app.deletedAt
                  ? "outline"
                  : app.status === "deployed"
                    ? "default"
                    : app.status === "failed"
                      ? "destructive"
                      : "secondary"
              }
            >
              {app.deletedAt ? "deleted" : app.status}
            </Badge>
          </TableCell>
          <TableCell>{new Date(app.createdAt).toUTCString()}</TableCell>
        </TableRow>
      ))
    }
  </TableBody>
</Table>

<script>
  const rows = document.querySelectorAll<HTMLTableRowElement>("tr[data-app-id]")
  rows.forEach((row) => {
    row.addEventListener("click", function () {
      window.location.href = `/apps/${this.dataset.appId}`
    })
  })
</script>
