---
import Layout from "../layouts/Layout.astro"
import Logout from "../components/Logout.astro"
import { getSession } from "auth-astro/server"

import { z } from "zod"

const session = await getSession(Astro.request)

if (!session) {
  return Astro.redirect("/")
}

// import { isRegistered, deployApp } from "../../data/apps"

const formDataSchema = z.object({
  repo: z
    .string()
    .min(1, "Please enter a repo.")
    .refine((data) => /^https:\/\/github\.com\/[^\/]+\/[^\/]+$/.test(data), {
      message:
        "Repo must be a valid GitHub URL in the format 'https://github.com/username/repository'.",
    })
    .transform((data) => data.replace("https://github.com/", "")),
  branch: z.string().min(1, "Branch is not valid."),
  directory: z.string().optional(),
})

// Validate GitHub repository, branch, and directory
formDataSchema.superRefine(async ({ repo, branch, directory }, ctx) => {
  const headers = {
    Authorization: `Bearer ${session.accessToken}`,
    Accept: "application/vnd.github.v3+json",
  }

  const repoUrl = `https://api.github.com/repos/${repo}`
  const branchUrl = `https://api.github.com/repos/${repo}/branches/${branch}`

  try {
    const repoResponse = await fetch(repoUrl, { headers })
    if (!repoResponse.ok) {
      ctx.addIssue({
        path: ["repo"],
        message: "Repository not found",
        code: "custom",
      })
      return z.NEVER
    }

    const branchResponse = await fetch(branchUrl, { headers })
    if (!branchResponse.ok) {
      ctx.addIssue({
        path: ["branch"],
        message: "Branch not found in the repository",
        code: "custom",
      })
      return z.NEVER
    }

    if (directory) {
      const directoryUrl = `https://api.github.com/repos/${repo}/contents/${directory}?ref=${branch}`
      const directoryResponse = await fetch(directoryUrl, { headers })
      if (!directoryResponse.ok) {
        ctx.addIssue({
          path: ["directory"],
          message: "Directory not found in the repository",
          code: "custom",
        })
        return z.NEVER
      }
    }
  } catch (error) {
    // Handle network or unexpected errors
    ctx.addIssue({
      path: [],
      message: "Failed to validate with GitHub API",
      code: "custom",
    })
  }
})

const deployApp = async ({
  repo,
  branch,
  directory,
}: z.infer<typeof formDataSchema>) => {
  console.log("Deploying app", { repo, branch, directory })
}

const errors = { repo: "", branch: "", directory: "" }

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData()
    const data = Object.fromEntries(formData)

    const { repo, branch, directory } = await formDataSchema.parseAsync(data)

    await deployApp({ repo, branch, directory })
    return Astro.redirect("/apps")
  } catch (error) {
    if (error instanceof z.ZodError) {
      for (const issue of error.issues) {
        if (Object.hasOwn(errors, issue.path[0])) {
          // Ensure the key exists in 'errors'
          errors[issue.path[0]] = issue.message
        }
      }
      // errors = error.flatten().fieldErrors
      // Map Zod errors to the existing structure
      // for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {
      //   errors[key] = value.join(", ") // Join multiple errors with comma
      // }
    } else if (error instanceof Error) {
      console.error(error.message)
    }
  }
}
---

<Layout title="Welcome to Codius.">
  <main>
    <Logout />
    <p>
      Deploy your <a href="https://developers.cloudflare.com/workers/"
        >Cloudflare worker</a
      > to Codius
    </p>
    <form method="POST">
      <input type="hidden" name="token" value={session.accessToken} />
      <label for="repo">
        GitHub Repository URL:
        <input
          type="text"
          id="repo"
          name="repo"
          required
          pattern="^https:\/\/github\.com\/[^\/]+\/[^\/]+$"
          title="URL must follow the format 'https://github.com/username/repository'"
        />
      </label>
      {errors.repo && <p>{errors.repo}</p>}

      <label for="branch">
        Branch:
        <input type="text" id="branch" name="branch" value="main" />
      </label>
      {errors.branch && <p>{errors.branch}</p>}

      <label for="directory">
        Directory of the Worker (default: root):
        <input type="text" id="directory" name="directory" />
      </label>
      {errors.directory && <p>{errors.directory}</p>}

      <button type="submit">Deploy</button>
    </form>
  </main>
</Layout>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  /* form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  } */

  form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    align-items: end;
  }

  label {
    display: flex;
    flex-direction: column;
  }

  input {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 0.25rem;
  }

  button {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 0.25rem;
    background-color: #0070f3;
    color: white;
    cursor: pointer;
  }
</style>
